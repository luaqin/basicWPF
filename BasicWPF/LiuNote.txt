把普通CLR类型单个对象指定为Source:包括.NETFramework自带类型的对象和用户自定义类型的对象。如果类型实现了INotifyPropertyChanged接口，则可通过在属性的set语句激发PropertyChanged事件来通知Binding数据已被更新

把普通CLR结合类型对象指定为Source;包括DataTable和DataView等对象

使用XmlDataProvider把XML数据指定为Source:XML作为标准的数据存储和传输格式几乎无处不在，我们可以用它表示单个数据对象或者集合：一些WPF控件是级联式，我们可以把树结构的XML数据作为源指定给与之关联的Binding

把依赖对象指定为Source：依赖对象不仅可以作为Binding的目标，同时也可以作为Binding的源。这样就有可能形成Binding链。依赖对象中的依赖属性可以作为Binding的Path.

把容器的DataContext指定为Source:有时候我们会遇到这样的情况--我们明确知道将从哪个属性获取数据，但具体把哪个对象作为Binding源还不清楚。这时候我们只能建立一个Binding，只给它设置Path而不设置Source,让这个Binding自己去寻找Source,这时候，Binding会自动把控件的DataContext当作自己的Source

通过ElementName指定Source:在C#代码里可以直接把对象作为Source赋值给Binding，但XML无法访问对象，所以只能使用对象的Name属性来找到对象

通过Binding的RelativateSource属性相对地指定Source:当控件需要关注自己的，自己容器的或者自己内部的元素的莫个值就需要使用这种办法

把ObjectDataProvite对象指定为Source:当数据源的数据不是通过属性而是通过方法暴露给外界的时候，我们可以使用这两种对象来包装数据源再把它们指定为Source

使用LINQ检索得到的数据对象作为Binding的源
